package com.gtq.order.tools;

import java.util.ArrayList;
import java.util.HashMap;

import com.gtq.order.bean.FoodBean;
import com.gtq.order.myinterface.AdatperFuntion;
import com.gtq.order.view.OrderActivity;
import com.gtq.order.view.R;


import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.SharedPreferences.Editor;
import android.support.v4.view.PagerAdapter;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnClickListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.CompoundButton.OnCheckedChangeListener;

public class MyAdapters {

	
	/**
	 * @description 详细适配器
	 * @version 1.0
	 * @author zdq
	 * @update 2013-8-10 上午1:51:32
	 */

	class MyViewPagerAdapter extends PagerAdapter {

		/**
		 * @fields mListViews
		 */
		ArrayList<View> mListViews;

		public MyViewPagerAdapter(ArrayList<View> mListViews) {
			this.mListViews = mListViews;
		}

		@Override
		public int getCount() {
			// TODO Auto-generated method stub
			return mListViews.size();
		}

		@Override
		public boolean isViewFromObject(View arg0, Object arg1) {
			// TODO Auto-generated method stub
			return arg0 == arg1;
		}

		@Override
		public Object instantiateItem(ViewGroup container, int position) {
			// TODO Auto-generated method stub
			container.addView(mListViews.get(position));

			return mListViews.get(position);
		}

		@Override
		public void destroyItem(ViewGroup container, int position, Object object) {
			// TODO Auto-generated method stub
			container.removeView(mListViews.get(position));
		}

	}
	/**
	 * @description
	 * @version 1.0
	 * @author zdq
	 * @update 2013-8-10 上午1:51:15
	 */

	static class ViewHolder {
		CheckBox select;
		TextView name;
		TextView price;
		ImageView details;

	}


	/**
	 * @description 食品适配器
	 * @version 1.0
	 * @author zdq
	 * @update 2013-8-10 上午1:51:50
	 */

	class foodlistAdapter extends BaseAdapter {
		

		Context context;
		ArrayList<FoodBean> foodBeans;
		AdatperFuntion adatperFuntion;

		public foodlistAdapter(ArrayList<FoodBean> foodBeans, Context context,	
				AdatperFuntion adatperFuntion) {
			this.foodBeans = foodBeans;
			this.context = context;
			this.adatperFuntion=adatperFuntion;
		}

		@Override
		public int getCount() {
			// TODO Auto-generated method stub
			return foodBeans.size();
		}

		@Override
		public Object getItem(int position) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public long getItemId(int position) {
			// TODO Auto-generated method stub
			return 0;
		}

		@Override
		public View getView(final int position, View convertView,
				ViewGroup parent) {
			// TODO Auto-generated method stub
			ViewHolder holder;
			// if(convertView==null)
			// {
			convertView = LayoutInflater.from(context).inflate(
					R.layout.order_user_food_item, null);
			holder = new ViewHolder();
			holder.select = (CheckBox) convertView
					.findViewById(R.id.order_user_food_checkbox);
			holder.name = (TextView) convertView
					.findViewById(R.id.order_user_food_name);
			holder.price = (TextView) convertView
					.findViewById(R.id.order_user_food_price);
			holder.details = (ImageView) convertView
					.findViewById(R.id.order_user_food_msg);

			convertView.setTag(holder);

			// }
			// else{
			// holder = (ViewHolder)convertView.getTag();
			// }
			foodBeans.get(position).setIsselect(
					context.getSharedPreferences("foodstate", 0).getBoolean(
							foodBeans.get(position).getId(), false));
			holder.select.setChecked(context.getSharedPreferences("foodstate", 0)
					.getBoolean(foodBeans.get(position).getId(), false));
			holder.select
					.setOnCheckedChangeListener(new OnCheckedChangeListener() {

						@Override
						public void onCheckedChanged(CompoundButton buttonView,
								boolean isChecked) {
							// TODO Auto-generated method stub

							int i = position;
							Editor editor = context.getSharedPreferences("foodstate", 0)
									.edit();
							editor.putBoolean(foodBeans.get(i).getId(),
									isChecked);
							editor.commit();

						}
					});
			holder.name = (TextView) convertView
					.findViewById(R.id.order_user_food_name);
			holder.name.setText(foodBeans.get(position).getName());
			holder.price = (TextView) convertView
					.findViewById(R.id.order_user_food_price);
			holder.price.setText(foodBeans.get(position).getPrice());
			holder.details.setOnClickListener(new OnClickListener() {

				@Override
				public void onClick(View v) {
					// TODO Auto-generated method stub
					adatperFuntion.adapterButtonClick((Button)v, "details",position);
					
				}
			});

			return convertView;
		}

	}
	/**
	 * @description 营养分析适配器
	 * @version 1.0
	 * @author zdq
	 * @update 2013-8-10 上午1:52:04
	 */

	class AnalysisAdapter extends BaseAdapter {
		ArrayList<FoodBean> data;
		ArrayList<String> dates = new ArrayList<String>();
		Context context;
		public AnalysisAdapter(ArrayList<FoodBean> data,Context context) {
			// TODO Auto-generated constructor stub
			this.data = data;
			this.context=context;
		}

		@Override
		public int getCount() {
			// TODO Auto-generated method stub

			for (FoodBean bean : data) {
				if (dates.size() == 0)
					dates.add(bean.getDate());
				else {
					for (int i = 0; i < dates.size(); i++) {
						if (dates.get(i).equals(bean.getDate()))
							break;
						if (i == dates.size() - 1) {
							dates.add(bean.getDate());
							break;
						}
					}
				}
			}
			return dates.size();
		}

		@Override
		public Object getItem(int arg0) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public long getItemId(int arg0) {
			// TODO Auto-generated method stub
			return 0;
		}

		@Override
		public View getView(int arg0, View arg1, ViewGroup arg2) {
			// TODO Auto-generated method stub
			arg1 = LayoutInflater.from(context).inflate(
					R.layout.order_analysis_listview_item, null);
			Button order_analysis_item_data_button = (Button) arg1
					.findViewById(R.id.order_analysis_item_data_button);
			final TextView order_analysis_item_msg = (TextView) arg1
					.findViewById(R.id.order_analysis_item_msg);
			order_analysis_item_data_button.setText(dates.get(arg0));
			order_analysis_item_data_button
					.setOnClickListener(new OnClickListener() {

						@Override
						public void onClick(View v) {
							// TODO Auto-generated method stub
							if (order_analysis_item_msg.getVisibility() == View.GONE) {
								order_analysis_item_msg
										.setVisibility(View.VISIBLE);
							} else
								order_analysis_item_msg
										.setVisibility(View.GONE);
							;
						}
					});
			order_analysis_item_msg.setText(OthersTool.getAnalysisMsg(dates.get(arg0),
					data, db));

			return arg1;
		}

	}

	/**
	 * @description 分类适配器
	 * @version 1.0
	 * @author zdq
	 * @update 2013-8-10 上午1:44:32
	 */
	
	class classifyAdapter extends BaseAdapter {
	
		Context context;
		ArrayList<String> datas;
	
		public classifyAdapter(ArrayList<String> datas, Context context) {
			this.context = context;
			this.datas = datas;
		}
	
		@Override
		public int getCount() {
			// TODO Auto-generated method stub
			return datas.size();
		}
	
		@Override
		public Object getItem(int arg0) {
			// TODO Auto-generated method stub
			return null;
		}
	
		@Override
		public long getItemId(int arg0) {
			// TODO Auto-generated method stub
			return 0;
		}
	
		@Override
		public View getView(final int arg0, View arg1, ViewGroup arg2) {
			// TODO Auto-generated method stub
			arg1 = LayoutInflater.from(context).inflate(
					R.layout.horizontal_list_view_items, null);
			Button button = (Button) arg1
					.findViewById(R.id.order_user_classify_HorizontalListView_item);
			button.setText(datas.get(arg0));
			button.setOnClickListener(new OnClickListener() {
	
				@Override
				public void onClick(View v) {
					// TODO Auto-generated method stub
					changeFoodByType(datas.get(arg0),
							order_user_classify_button.getText().toString());
				}
			});
			return arg1;
		}
	
	}
	/**
	 * @description 已点食物适配器
	 * @version 1.0
	 * @author zdq
	 * @update 2013-8-10 上午1:45:25
	 */

	class alreadyfoodlistadapter extends BaseAdapter {

		Context context;
		ArrayList<FoodBean> foodBeans;

		public alreadyfoodlistadapter(ArrayList<FoodBean> foodBeans,
				Context context) {
			this.foodBeans = foodBeans;
			this.context = context;
		}

		@Override
		public int getCount() {
			// TODO Auto-generated method stub
			return foodBeans.size();
		}

		@Override
		public Object getItem(int position) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public long getItemId(int position) {
			// TODO Auto-generated method stub
			return 0;
		}

		@Override
		public View getView(final int position, View convertView,
				ViewGroup parent) {
			// TODO Auto-generated method stub
			convertView = LayoutInflater.from(context).inflate(
					R.layout.order_user_already_foodlist_item, null);
			CheckBox checkBox = (CheckBox) convertView
					.findViewById(R.id.order_user_already_food_checkbox);
			checkBox.setOnCheckedChangeListener(new OnCheckedChangeListener() {

				@Override
				public void onCheckedChanged(CompoundButton buttonView,
						boolean isChecked) {
					// TODO Auto-generated method stub
					if (isChecked) {
						foodBeans.get(position).setEdit(true);
					}
				}
			});

			TextView name = (TextView) convertView
					.findViewById(R.id.order_user_already_food_name);
			name.setText(foodBeans.get(position).getName());
			final EditText price = (EditText) convertView
					.findViewById(R.id.order_user_already_food_price);
			final String foodprice = foodBeans.get(position).getPrice();
			price.setText(foodprice);

			price.addTextChangedListener(new TextWatcher() {

				@Override
				public void onTextChanged(CharSequence s, int start,
						int before, int count) {
					// TODO Auto-generated method stub

				}

				@Override
				public void beforeTextChanged(CharSequence s, int start,
						int count, int after) {
					// TODO Auto-generated method stub

				}

				@Override
				public void afterTextChanged(Editable s) {
					// TODO Auto-generated method stub
					
					if (!price.getText().toString().equals("")) {

						pay_money = pay_money
								- Integer.valueOf(foodBeans.get(position)
										.getCount())
								* Float.valueOf(foodBeans.get(position)
										.getFoodtprice())
								+ Integer.valueOf(foodBeans.get(position)
										.getCount())
								* Float.valueOf(price.getText().toString());
						order_user_item_text_money.setText("总金额："
								+ String.valueOf(pay_money));
						foodBeans.get(position).setFoodtprice(
								price.getText().toString());
					} else

						price.setText(foodprice);

				}
			});
			final EditText num = (EditText) convertView
					.findViewById(R.id.order_user_already_food_number);
			if (foodBeans.get(position).getCount() == null) {
				num.setText("1");
				foodBeans.get(position).setCount("1");
			} else {
				num.setText(foodBeans.get(position).getCount());

			}

			num.addTextChangedListener(new TextWatcher() {

				@Override
				public void onTextChanged(CharSequence s, int start,
						int before, int count) {
					// TODO Auto-generated method stub

				}

				@Override
				public void beforeTextChanged(CharSequence s, int start,
						int count, int after) {
					// TODO Auto-generated method stub

				}

				@Override
				public void afterTextChanged(Editable s) {
					// TODO Auto-generated method stub

					if (!num.getText().toString().equals("")) {
						pay_money = pay_money
								- Integer.valueOf(foodBeans.get(position)
										.getCount())
								* Float.valueOf(foodBeans.get(position)
										.getPrice())
								+ Integer.valueOf(num.getText().toString())
								* Float.valueOf(foodBeans.get(position)
										.getPrice());
						order_user_item_text_money.setText("总金额："
								+ String.valueOf(pay_money));

						foodBeans.get(position).setCount(
								num.getText().toString());
					} else
						num.setText("1");
				}
			});
			final EditText require = (EditText) convertView
					.findViewById(R.id.order_user_already_food_require);
			if (foodBeans.get(position).getFoodRequire() != null)
				require.setText(foodBeans.get(position).getFoodRequire());
			else
				require.setText("");
			foodBeans.get(position)
					.setFoodRequire(require.getText().toString());
			require.addTextChangedListener(new TextWatcher() {

				@Override
				public void onTextChanged(CharSequence s, int start,
						int before, int count) {
					// TODO Auto-generated method stub

				}

				@Override
				public void beforeTextChanged(CharSequence s, int start,
						int count, int after) {
					// TODO Auto-generated method stub

				}

				@Override
				public void afterTextChanged(Editable s) {
					// TODO Auto-generated method stub
					foodBeans.get(position).setFoodRequire(
							require.getText().toString());
				}
			});
			TextView meal = (TextView) convertView
					.findViewById(R.id.order_user_already_food_meal);
			meal.setText(foodBeans.get(position).getMealTimes());
			TextView date = (TextView) convertView
					.findViewById(R.id.order_user_already_food_date);
			String[] s = foodBeans.get(position).getDate().split("-");
			date.setText(s[1] + "-" + s[2]);

			return convertView;
		}

	}
	

}
